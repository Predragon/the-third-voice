"""
App Controller Module for The Third Voice AI
Main application controller that orchestrates all components
Full demo user support using your AI engine
"""

import streamlit as st
import traceback
from .components import UIComponents
from .pages import AuthenticationUI, OnboardingFlow, Dashboard, AdminDashboard
from ..auth.demo_manager import DemoManager
from ..core.ai_engine import AIEngine
from ..data.database import DatabaseManager
from ..auth.auth_manager import AuthManager

class ThirdVoiceApp:
    """Main application controller"""

    def __init__(self):
        self.db = DatabaseManager()
        self.ai_engine = AIEngine()
        self.auth_manager = AuthManager(self.db)
        self.auth_ui = AuthenticationUI(self.auth_manager)
        self.onboarding = OnboardingFlow(self.db, self.ai_engine)
        self.dashboard = Dashboard(self.db, self.ai_engine)
        self.admin_dashboard = AdminDashboard(self.db)

    def run(self):
        """Main application entry point"""

        # Load custom CSS
        UIComponents.load_custom_css()

        # --- Admin Mode ---
        try:
            query_params = st.query_params
            if query_params.get('admin') == ['true']:
                if not self.auth_ui.run():
                    return
                user_id = self.auth_manager.get_current_user_id()
                if user_id:
                    self.admin_dashboard.run(user_id, self.auth_manager)
                return
        except:
            try:
                query_params = st.experimental_get_query_params()
                if 'admin' in query_params and query_params['admin'][0] == 'true':
                    if not self.auth_ui.run():
                        return
                    user_id = self.auth_manager.get_current_user_id()
                    if user_id:
                        self.admin_dashboard.run(user_id, self.auth_manager)
                    return
            except:
                pass

        # --- Demo Login ---
        if st.button("Use Demo Account"):
            DemoManager.sign_in(self.db)
            st.rerun()

        # Demo warning
        if DemoManager.is_demo():
            st.warning("‚ö†Ô∏è This is a demo account. Messages are not saved, but usage is tracked.")

        # --- Authentication ---
        if not DemoManager.is_demo() and not self.auth_ui.run():
            return

        # Current user info
        user = getattr(st.session_state, "user", None)
        user_id = user.id if user else self.auth_manager.get_current_user_id()
        user_email = user.email if user else self.auth_manager.get_current_user_email()

        if DemoManager.is_demo():
            user_id = "demo_user"
            user_email = "demo@example.com"

        if not user_id:
            st.error("Authentication error. Please refresh the page.")
            return

        # --- Fetch Contacts ---
        if DemoManager.is_demo():
            contacts = DemoManager.get_demo_contacts()
        else:
            try:
                contacts = self.db.get_user_contacts(user_id)
            except Exception as e:
                st.error(f"Error fetching contacts: {e}")
                contacts = []

        # --- Onboarding Check ---
        if not st.session_state.get('onboarding_completed', False):
            if not contacts:
                if self.onboarding.run(user_id, self.auth_manager):
                    st.rerun()
                return
            st.session_state.onboarding_completed = True

        # --- Contact Selection ---
        st.subheader("Select a Relationship for Context")
        selected_contact = st.selectbox(
            "Pick a relationship",
            options=contacts,
            format_func=lambda x: x["name"] if isinstance(x, dict) else str(x)
        )

        # Show contact description
        if DemoManager.is_demo() and isinstance(selected_contact, dict):
            st.markdown(f"**Context**: {selected_contact['description']}")

        # --- Mode Selection ---
        st.subheader("Select Mode")
        mode_choice = st.radio(
            "Choose an action:", 
            ["Transform", "Interpret"],
            help="Transform: Rewrite your message to be more constructive. Interpret: Understand what someone really means and get response suggestions."
        )

        # --- Message Input ---
        st.subheader("Your Message")
        if DemoManager.is_demo() and isinstance(selected_contact, dict):
            examples = DemoManager.get_demo_examples(selected_contact["id"])
            if examples:
                st.markdown("**üí° Try these example messages:**")
                for example in examples:
                    if st.button(f"Use: '{example[:50]}...'", key=f"example_{hash(example)}"):
                        st.session_state.demo_message = example

        user_input = st.text_area(
            "Type your message here:", 
            value=st.session_state.get('demo_message', ''),
            key="message_input"
        )

        if 'demo_message' in st.session_state:
            del st.session_state.demo_message

        # --- Send Message ---
        if st.button("Send", type="primary") and user_input.strip():
            try:
                context = selected_contact["context"] if isinstance(selected_contact, dict) else "friend"
                contact_id = selected_contact["id"] if isinstance(selected_contact, dict) else "unknown"

                with st.spinner("Processing your message..."):
                    ai_response = self.ai_engine.process_message(
                        message=user_input,
                        contact_context=context,
                        message_type=mode_choice.lower(),
                        contact_id=contact_id,
                        user_id=user_id,
                        db=self.db
                    )

                self._display_ai_response(ai_response, mode_choice)

                # Store messages
                if DemoManager.is_demo():
                    DemoManager.add_message(user_input, ai_response.transformed_message, selected_contact, mode_choice)
                else:
                    from ..data.database import save_message
                    save_message(user_email, user_input, ai_response.transformed_message, selected_contact, mode_choice)

            except Exception as e:
                st.error(f"Error processing message: {str(e)}")
                st.code(traceback.format_exc())

        # --- Display Past Demo Messages ---
        if DemoManager.is_demo() and st.session_state.get('demo_messages', []):
            st.subheader("üí¨ Demo Chat History (Session Only)")
            for i, msg in enumerate(reversed(st.session_state['demo_messages'])):
                with st.expander(f"{msg['contact']['name']} - {msg['mode']} ({i+1} messages ago)"):
                    st.markdown(f"**Your Original:** {msg['input']}")
                    st.markdown(f"**AI Response:** {msg['response']}")

    def _display_ai_response(self, ai_response, mode_choice):
        """Display AI response with rich formatting"""
        if mode_choice == "Transform":
            st.success("‚ú® **Transformed Message:**")
            st.write(f"*{ai_response.transformed_message}*")
            col1, col2 = st.columns(2)
            with col1:
                st.metric("Healing Score", f"{ai_response.healing_score}/10")
            with col2:
                st.metric("Emotional Tone", ai_response.emotional_state.title())
            if ai_response.explanation:
                st.info(f"**Why this helps:** {ai_response.explanation}")
        else:
            st.success("üîç **What they really mean:**")
            if ai_response.subtext:
                st.write(f"**Deeper feelings:** {ai_response.subtext}")
            st.success("üí¨ **Suggested response:**")
            st.write(f"*{ai_response.transformed_message}*")
            if ai_response.needs:
                st.write("**Their emotional needs:**")
                for need in ai_response.needs:
                    st.write(f"‚Ä¢ {need}")
            if ai_response.explanation:
                st.info(f"**Analysis:** {ai_response.explanation}")
        if ai_response.model_used:
            st.caption(f"Response generated by: {ai_response.model_used}")

def run_app():
    """Streamlit entry point"""
    app = ThirdVoiceApp()
    app.run()
