# third_voice_ai/ui/main_ui.py
# Main application UI components for The Third Voice AI

import streamlit as st
from typing import Dict, Any, Optional
from .components import (
    display_error, display_success, show_navigation_button, 
    show_form_input, show_selectbox, show_contact_card,
    show_conversation_message, show_healing_score_display,
    show_copy_button, create_two_column_layout, create_three_column_layout,
    create_metric_card
)
from ..config import CONTEXTS, ENABLE_ANALYTICS, ENABLE_INTERPRETATION, ERROR_MESSAGES


class MainUI:
    """Main application UI components and handlers"""
    
    @staticmethod
    def show_sidebar(state_manager, auth_manager) -> None:
        """
        Display application sidebar with navigation and contacts
        
        Args:
            state_manager: State manager instance
            auth_manager: Authentication manager instance
        """
        with st.sidebar:
            st.markdown("### 🎙️ The Third Voice AI")
            user = state_manager.get_user()
            st.write(f"**{user.email}**")
            
            if show_navigation_button("🚪 Logout", "logout_btn"):
                if auth_manager.sign_out():
                    state_manager.clear_authentication()
                    st.rerun()
            
            st.markdown("---")
            st.header("Navigation")
            
            MainUI._show_navigation_links(state_manager)
            
            st.markdown("---")
            st.header("Contacts")
            
            MainUI._show_contacts_sidebar(state_manager)
            
            st.markdown("---")
            MainUI._show_mission_reminder()
    
    @staticmethod
    def show_first_time_setup(state_manager, data_manager) -> None:
        """
        Display first-time setup page
        
        Args:
            state_manager: State manager instance
            data_manager: Data manager instance
        """
        st.markdown("### 🎙️ Welcome to The Third Voice")
        st.markdown("**Choose a relationship type to get started, or add a custom contact:**")
        
        # Quick context buttons in 2 columns
        cols = st.columns(2)
        contexts_items = list(CONTEXTS.items())
        
        for i, (context_key, context_info) in enumerate(contexts_items):
            with cols[i % 2]:
                if st.button(
                    f"{context_info['icon']} {context_key.title()}\n{context_info['description']}",
                    key=f"context_{context_key}",
                    use_container_width=True
                ):
                    MainUI._handle_quick_contact_creation(context_key, state_manager, data_manager)
        
        st.markdown("---")
        
        # Custom contact form
        MainUI._show_custom_contact_form(state_manager, data_manager, "first_time")
        
        # Welcome message
        MainUI._show_welcome_message()
    
    @staticmethod
    def show_add_contact_page(state_manager, data_manager) -> None:
        """
        Display add contact page
        
        Args:
            state_manager: State manager instance
            data_manager: Data manager instance
        """
        st.markdown("### ➕ Add New Contact")
        
        if show_navigation_button("← Back to Contacts", "back_to_contacts"):
            state_manager.navigate_to("contacts_list")
            state_manager.clear_error()
            st.rerun()
        
        st.markdown("**Tell us about this relationship so we can provide better guidance:**")
        
        MainUI._show_custom_contact_form(state_manager, data_manager, "add_contact")
    
    @staticmethod
    def show_contacts_list(state_manager, data_manager) -> None:
        """
        Display contacts list page
        
        Args:
            state_manager: State manager instance
            data_manager: Data manager instance
        """
        st.markdown("### 🎙️ The Third Voice - Your Contacts")
        
        contacts = state_manager.get_contacts()
        
        if not contacts:
            MainUI._show_empty_contacts_state(state_manager)
            return
        
        # Sort contacts by most recent activity
        sorted_contacts = MainUI._sort_contacts_by_activity(contacts)
        
        st.markdown(f"**{len(sorted_contacts)} contact{'s' if len(sorted_contacts) != 1 else ''}** • Tap to continue conversation")
        
        # Display contacts as buttons with preview
        MainUI._display_contact_buttons(sorted_contacts, state_manager)
        
        st.markdown("---")
        if show_navigation_button("➕ Add New Contact", "add_new_contact_from_list"):
            state_manager.navigate_to("add_contact")
            st.rerun()
        
        # Analytics section if enabled
        if ENABLE_ANALYTICS:
            MainUI._show_analytics_section(data_manager)
    
    @staticmethod
    def show_conversation_interface(state_manager, data_manager, ai_processor) -> None:
        """
        Display conversation interface
        
        Args:
            state_manager: State manager instance
            data_manager: Data manager instance
            ai_processor: AI processor instance
        """
        active_contact = state_manager.get_active_contact()
        if not active_contact:
            display_error(ERROR_MESSAGES["contact_not_found"])
            state_manager.navigate_to("contacts_list")
            st.rerun()
            return
        
        contact_data = state_manager.get_contact_data(active_contact)
        if not contact_data:
            display_error(ERROR_MESSAGES["contact_not_found"])
            state_manager.navigate_to("contacts_list")
            st.rerun()
            return
        
        context = contact_data["context"]
        history = contact_data["history"]
        contact_id = contact_data.get("id")
        
        # Header
        st.markdown(f"### {CONTEXTS[context]['icon']} {active_contact} - {CONTEXTS[context]['description']}")
        
        # Navigation buttons
        MainUI._show_conversation_navigation(state_manager, contact_id, active_contact, context)
        
        # Relationship progress if available
        if ENABLE_ANALYTICS and history:
            MainUI._show_relationship_progress(ai_processor, history)
        
        st.markdown("---")
        
        # Input section
        MainUI._show_input_section(state_manager, data_manager, ai_processor, active_contact, context, history, contact_id)
        
        st.markdown("---")
        
        # AI Response section
        MainUI._show_ai_response_section(state_manager, active_contact, history)
        
        st.markdown("---")
        
        # Conversation History
        MainUI._show_conversation_history(history)
    
    @staticmethod
    def show_edit_contact_page(state_manager, data_manager) -> None:
        """
        Display edit contact page
        
        Args:
            state_manager: State manager instance
            data_manager: Data manager instance
        """
        edit_contact = state_manager.get_edit_contact()
        if not edit_contact:
            state_manager.navigate_to("contacts_list")
            st.rerun()
            return
        
        st.markdown(f"### ✏️ Edit Contact: {edit_contact['name']}")
        
        if show_navigation_button("← Back", "back_to_conversation"):
            state_manager.navigate_to("conversation")
            state_manager.set_edit_contact(None)
            st.rerun()
        
        MainUI._show_edit_contact_form(edit_contact, state_manager, data_manager)
        
        # Warning about deletion
        st.warning("⚠️ Deleting a contact will permanently remove all conversation history with them.")
    
    # Helper methods
    @staticmethod
    def _show_navigation_links(state_manager) -> None:
        """Show navigation links in sidebar"""
        app_mode = state_manager.get_app_mode()
        
        if app_mode != "contacts_list":
            if show_navigation_button("🏠 My Contacts", "nav_contacts"):
                state_manager.navigate_to("contacts_list")
                state_manager.set_active_contact(None)
                st.rerun()
        
        if app_mode == "contacts_list" or app_mode == "conversation":
            if show_navigation_button("➕ Add Contact", "nav_add_contact"):
                state_manager.navigate_to("add_contact")
                st.rerun()
    
    @staticmethod
    def _show_contacts_sidebar(state_manager) -> None:
        """Show contacts in sidebar"""
        contacts = state_manager.get_contacts()
        if not contacts:
            st.markdown("*No contacts yet*")
        else:
            for contact_name, contact_data in contacts.items():
                context_icon = CONTEXTS[contact_data['context']]['icon']
                is_active = state_manager.get_active_contact() == contact_name
                
                if st.button(
                    f"{context_icon} {contact_name}",
                    key=f"sidebar_contact_{contact_name}",
                    use_container_width=True,
                    type="primary" if is_active else "secondary"
                ):
                    state_manager.set_active_contact(contact_name)
                    state_manager.navigate_to("conversation")
                    st.rerun()
    
    @staticmethod
    def _show_mission_reminder() -> None:
        """Show mission reminder in sidebar"""
        st.markdown("### 💙 Our Mission")
        st.markdown("""
        *"When both people are speaking from pain, someone must be the third voice."*
        
        **We help families heal through better conversations.**
        """)
    
    @staticmethod
    def _handle_quick_contact_creation(context_key: str, state_manager, data_manager) -> None:
        """Handle quick contact creation from context buttons"""
        default_names = {
            "romantic": "Partner",
            "coparenting": "Co-parent", 
            "workplace": "Colleague",
            "family": "Family Member",
            "friend": "Friend"
        }
        contact_name = default_names.get(context_key, context_key.title())
        
        if data_manager.save_contact(contact_name, context_key):
            contacts = data_manager.load_contacts_and_history()
            state_manager.set_contacts(contacts)
            state_manager.set_active_contact(contact_name)
            state_manager.navigate_to("conversation")
            st.rerun()
    
    @staticmethod
    def _show_custom_contact_form(state_manager, data_manager, form_type: str) -> None:
        """Show custom contact form"""
        with st.form(f"{form_type}_contact_form"):
            if form_type == "first_time":
                st.markdown("**Or add a custom contact:**")
                name_key = "first_time_new_contact_name_input"
                context_key = "first_time_new_contact_context_select"
                button_text = "Add Custom Contact"
            else:
                name_key = "add_contact_name_input_widget"
                context_key = "add_contact_context_select_widget"
                button_text = "Add Contact"
            
            name = show_form_input(
                "Contact Name" if form_type != "first_time" else "Name",
                name_key,
                placeholder="Sarah, Mom, Dad, Boss..." if form_type != "first_time" else "Sarah, Mom, Dad..."
            )
            
            context = show_selectbox(
                "Relationship Type" if form_type != "first_time" else "Relationship",
                list(CONTEXTS.keys()),
                context_key,
                format_func=lambda x: f"{CONTEXTS[x]['icon']} {x.title()}" + (f" - {CONTEXTS[x]['description']}" if form_type != "first_time" else "")
            )
            
            if st.form_submit_button(button_text, use_container_width=True):
                if name.strip():
                    if data_manager.save_contact(name.strip(), context):
                        contacts = data_manager.load_contacts_and_history()
                        state_manager.set_contacts(contacts)
                        if form_type == "first_time":
                            state_manager.set_active_contact(name.strip())
                            state_manager.navigate_to("conversation")
                        else:
                            display_success(f"Added {name.strip()}! Ready to start healing conversations.")
                            state_manager.navigate_to("contacts_list")
                        st.rerun()
                else:
                    display_error("Contact name cannot be empty.")
    
    @staticmethod
    def _show_welcome_message() -> None:
        """Show welcome message for first-time setup"""
        st.markdown("---")
        st.markdown("### 