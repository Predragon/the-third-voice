```python
# third_voice_ai/ui/main_ui.py
# Main application UI components for The Third Voice AI

import streamlit as st
from typing import Dict, Any, Optional
from .components import (
    display_error, display_success, show_navigation_button, 
    show_form_input, show_selectbox, show_contact_card,
    show_conversation_message, show_healing_score_display,
    show_copy_button, create_two_column_layout, create_three_column_layout,
    create_metric_card
)
from ..config import CONTEXTS, ENABLE_ANALYTICS, ENABLE_INTERPRETATION, ERROR_MESSAGES
from ..prompts import get_healing_score_explanation
from ..utils import utils
from loguru import logger

class MainUI:
    """Main application UI components and handlers"""
    
    # [Previous methods unchanged, omitted for brevity]

    @staticmethod
    def _show_input_section(state_manager, data_manager, ai_processor, active_contact: str, context: str, history: list, contact_id: str) -> None:
        """Show message input section"""
        logger.debug(f"Rendering input section for {active_contact}, clear flag: {state_manager.should_clear_input()}, session input: {len(st.session_state.get('conversation_input_text', ''))}, state manager input: {len(state_manager.get_conversation_input())}")
        
        # Clear input if flagged
        if state_manager.should_clear_input():
            st.session_state.conversation_input_text = ""
            state_manager.set_conversation_input("")
            state_manager.reset_clear_flag()
            logger.debug("Cleared conversation input text area and state manager")

        st.markdown("#### 💭 Your Input")
        st.markdown("*Share what happened - their message or your response that needs guidance*")
        
        # Message input
        message = st.text_area(
            "What's happening?",
            value=st.session_state.get("conversation_input_text", ""),
            key="conversation_input_text",
            placeholder="Examples:\n• They said: 'You never listen to me!'\n• I want to tell them: 'I'm frustrated with your attitude'\n• We had a fight about...",
            height=120
        )
        logger.debug(f"Text area rendered with message: {message[:50]}..., length: {len(message)}")

        # Sync session state and state manager
        st.session_state.conversation_input_text = message
        state_manager.set_conversation_input(message)
        logger.debug(f"Updated session state and state manager with message length: {len(message)}")
        
        # Action buttons
        col1, col2, col3 = create_three_column_layout()
        with col1:
            if show_navigation_button("✨ Transform with Love", "transform_message"):
                if not message.strip():
                    display_error(ERROR_MESSAGES["empty_message"])
                else:
                    MainUI._process_transform_message(state_manager, data_manager, ai_processor, active_contact, context, history, contact_id, message)
        
        with col2:
            logger.debug(f"Interpret button state: enabled={ENABLE_INTERPRETATION and bool(message.strip())}, text_length={len(message.strip())}")
            if ENABLE_INTERPRETATION and message.strip():
                if show_navigation_button("🔍 Interpret - What do they really mean?", "interpret_btn"):
                    logger.info(f"Interpret button clicked for {active_contact}, message: {message[:50]}...")
                    MainUI._process_interpret_message(state_manager, data_manager, ai_processor, active_contact, context, history, contact_id, message)
            else:
                st.button("🔍 Interpret", disabled=True, help="Enter a message first", key="interpret_btn_disabled", use_container_width=True)
        
        with col3:
            if show_navigation_button("🗑️ Clear", "clear_input_btn"):
                state_manager.set('clear_conversation_input', True)
                state_manager.clear_error()
                st.rerun()
        
        # Display interpretation results if available
        MainUI._show_interpretation_results(state_manager, active_contact)
    
    @staticmethod
    def _process_transform_message(state_manager, data_manager, ai_processor, active_contact: str, context: str, history: list, contact_id: str, message: str) -> None:
        """Process transform message request"""
        logger.debug(f"Processing transform message for contact: {active_contact}, message: {message[:50]}..., context: {context}, history length: {len(history)}")
        try:
            # Validate session state
            debug_info = state_manager.get_debug_info()
            logger.debug(f"Current session state: {debug_info}")

            # Process message with AI
            logger.info(f"Calling ai_processor.process_message for {active_contact}")
            result = ai_processor.process_message(
                contact_name=active_contact,
                message=message,
                context=context,
                history=history,
                is_incoming=False,
                instruction="Coach the user to rephrase their message in a kind, clear, and empathetic way that promotes healing in the {context} context. Use 'I' statements and avoid blame."
            )
            # Override detected type
            if result.get("success"):
                result["message_type"] = "coach"
            logger.debug(f"AI processor result: {result}")

            if result.get("success", False):
                logger.info(f"Saving message for contact_id: {contact_id}")
                save_success = data_manager.save_message(
                    contact_id=contact_id,
                    contact_name=active_contact,
                    message_type=result["message_type"],
                    original=message,
                    result=result["response"],
                    emotional_state=result["emotional_state"],
                    healing_score=result["healing_score"],
                    model_used=result["model"],
                    sentiment=result["sentiment"]
                )
                
                if save_success:
                    state_manager.set_last_response(active_contact, result)
                    logger.info(f"Message saved successfully, setting clear input flag for {active_contact}")
                    state_manager.set('clear_conversation_input', True)
                    st.rerun()
                else:
                    logger.error("Failed to save message in data_manager")
                    display_error("Failed to save message. Please try again.")
            else:
                error_msg = result.get("error", "Unknown error in AI processing")
                logger.error(f"AI processor failed: {error_msg}")
                display_error(error_msg)
        except Exception as e:
            logger.exception(f"Error processing message for {active_contact}: {str(e)}")
            display_error("Failed to process message. Please try again.")
    
    @staticmethod
    def _process_interpret_message(state_manager, data_manager, ai_processor, active_contact: str, context: str, history: list, contact_id: str, message: str) -> None:
        """Process interpret message request"""
        logger.debug(f"Processing interpret message for contact: {active_contact}, message: {message[:50]}..., context: {context}, history length: {len(history)}")
        try:
            result = ai_processor.process_message(
                contact_name=active_contact,
                message=message,
                context=context,
                history=history,
                is_incoming=True,
                instruction="Analyze the emotional subtext of this incoming message from {contact_name}. Identify underlying emotions, unmet needs, and suggest actionable ways to respond that foster healing in the {context} context."
            )
            # Override type for database consistency
            if result.get("success"):
                result["message_type"] = "interpretation"
            logger.debug(f"Interpret message result: {result}")
            
            if result["success"]:
                logger.info(f"Saving interpretation for contact_id: {contact_id}")
                state_manager.set_last_interpretation(active_contact, result)
                save_success = data_manager.save_interpretation(
                    contact_id=contact_id,
                    contact_name=active_contact,
                    original_message=message,
                    interpretation=result["response"],
                    interpretation_score=result["healing_score"],
                    model_used=result["model"]
                )
                
                if save_success:
                    logger.info(f"Interpretation saved successfully for {active_contact}")
                    state_manager.set('clear_conversation_input', True)
                    st.rerun()
                else:
                    logger.error("Failed to save interpretation in data_manager")
                    display_error("Failed to save interpretation. Please try again.")
            else:
                error_msg = result.get("error", "Unknown error in interpretation")
                logger.error(f"Interpretation failed: {error_msg}")
                display_error(error_msg)
        except Exception as e:
            logger.exception(f"Error interpreting message for {active_contact}: {str(e)}")
            display_error("Failed to interpret message. Please try again.")
    
    # [Rest of the class unchanged]
```